openapi: 3.0.3
info:
  title: DailyBlog
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/post/add:
    post:
      summary: 'Add blog post'
      operationId: addBlogPost
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'User id. Must be a valid UUID.'
                  example: 9a2e1b3e-8d29-41bc-b341-bf8804a5ce62
                category:
                  type: string
                  description: 'Category of blog post. Possible to use beauty, food, life, sport.'
                  example: food
                  enum:
                    - beauty
                    - sport
                    - food
                    - life
                title:
                  type: string
                  description: 'Title of blog post. Must not be greater than 256 characters.'
                  example: 'Eating a lof of sweets are unhealthy'
                description:
                  type: string
                  description: 'Blog post description. Must not be greater than 256 characters.'
                  example: 'In 1999 Michael J wrote that eating a lot of sweets involved on our health'
              required:
                - user_id
                - category
                - title
                - description
      security: []
  '/api/post/{post_id}':
    get:
      summary: 'Get post'
      operationId: getPost
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Post
      security: []
    parameters:
      -
        in: path
        name: post_id
        description: 'The ID of the post.'
        example: quisquam
        required: true
        schema:
          type: string
  '/api/post/{post_id}/edit':
    patch:
      summary: 'Update post'
      operationId: updatePost
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Post
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: 'Category of blog post. Possible to use beauty, food, life, sport.'
                  example: food
                  enum:
                    - beauty
                    - sport
                    - food
                    - life
                title:
                  type: string
                  description: 'Title of blog post. Must not be greater than 256 characters.'
                  example: 'Eating a lof of sweets are unhealthy'
                description:
                  type: string
                  description: 'Blog post description. Must not be greater than 256 characters.'
                  example: 'In 1999 Michael J wrote that eating a lot of sweets involved on our health'
      security: []
    parameters:
      -
        in: path
        name: post_id
        description: 'The ID of the post.'
        example: itaque
        required: true
        schema:
          type: string
  '/api/post/{post_id}/delete':
    delete:
      summary: 'Delete post'
      operationId: deletePost
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Post
      security: []
    parameters:
      -
        in: path
        name: post_id
        description: 'The ID of the post.'
        example: harum
        required: true
        schema:
          type: string
  /api/post:
    get:
      summary: 'List user posts'
      operationId: listUserPosts
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Post
      security: []
  /api/user/register:
    post:
      summary: 'Register User'
      operationId: registerUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  first_name: Patryk
                  last_name: Gajewski
                  phone_number: '777878727'
                  email: example22@gmail.com
                  country: poland
                  town: Warsaw
                  id: 9a3a1869-1239-4e03-adf1-051d9a02d580
                  updated_at: '2023-09-26T15:44:43.000000Z'
                  created_at: '2023-09-26T15:44:43.000000Z'
                properties:
                  first_name:
                    type: string
                    example: Patryk
                  last_name:
                    type: string
                    example: Gajewski
                  phone_number:
                    type: string
                    example: '777878727'
                  email:
                    type: string
                    example: example22@gmail.com
                  country:
                    type: string
                    example: poland
                  town:
                    type: string
                    example: Warsaw
                  id:
                    type: string
                    example: 9a3a1869-1239-4e03-adf1-051d9a02d580
                  updated_at:
                    type: string
                    example: '2023-09-26T15:44:43.000000Z'
                  created_at:
                    type: string
                    example: '2023-09-26T15:44:43.000000Z'
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'User first name. Must not be greater than 64 characters. Must be at least 2 characters.'
                  example: Patryk
                last_name:
                  type: string
                  description: 'User last name. Must not be greater than 64 characters. Must be at least 2 characters.'
                  example: Gajewski
                phone_number:
                  type: string
                  description: 'User phone number. Must be at least 9 characters. Must not be greater than 12 characters.'
                  example: '777878787'
                email:
                  type: string
                  description: 'User email. Must be a valid email address.'
                  example: example@gmail.com
                country:
                  type: string
                  description: 'User country of origin. Possible to add (poland,germany,spain,portugal).'
                  example: Poland
                  enum:
                    - poland
                    - germany
                    - spain
                    - portugal
                town:
                  type: string
                  description: 'Town name where user live.'
                  example: Warsaw
                password:
                  type: string
                  description: 'Password should have min one capital, number and special character.'
                  example: 'Qwerty123#'
                password_confirmation:
                  type: string
                  description: 'Confirmation password which has to be the same like password above. The value and <code>password</code> must match.'
                  example: 'Qwerty123#'
              required:
                - first_name
                - last_name
                - phone_number
                - email
                - country
                - password_confirmation
      security: []
  /api/user/login:
    post:
      summary: 'Login User'
      operationId: loginUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'User email. Must be a valid email address.'
                  example: example@gmail.com
                password:
                  type: string
                  description: ''
                  example: 'ldaR8i#L+Ez?:FF4}'
              required:
                - email
                - password
      security: []
  '/api/user/{user_id}/delete':
    delete:
      summary: 'Delete account'
      operationId: deleteAccount
      description: ''
      parameters: []
      responses: {  }
      tags:
        - User
      security: []
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 9a3655dc-ae0d-48e3-95c4-fc3eab2e619e
        required: true
        schema:
          type: string
tags:
  -
    name: Post
    description: ''
  -
    name: User
    description: ''
